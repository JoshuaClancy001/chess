package chess;

import java.sql.SQLOutput;
import java.util.ArrayList;

public class MovementRules {

    public MovementRules(){

    }

    public ArrayList<ChessMove> KingMoves(ChessBoard board, ChessPosition ogPosition){
        ArrayList<ChessMove> newPossiblePositions = new ArrayList<>();

        ArrayList<ChessPosition> newkingPositions = new ArrayList<>();

        newkingPositions.add(new ChessPosition(ogPosition.row,ogPosition.col+1));
        newkingPositions.add(new ChessPosition(ogPosition.row, ogPosition.col - 1));
        newkingPositions.add(new ChessPosition(ogPosition.row + 1, ogPosition.col));
        newkingPositions.add(new ChessPosition(ogPosition.row + 1, ogPosition.col + 1));
        newkingPositions.add(new ChessPosition(ogPosition.row + 1, ogPosition.col - 1));
        newkingPositions.add(new ChessPosition(ogPosition.row - 1, ogPosition.col));
        newkingPositions.add(new ChessPosition(ogPosition.row - 1, ogPosition.col + 1));
        newkingPositions.add(new ChessPosition(ogPosition.row - 1, ogPosition.col + -1));

    for (ChessPosition i : newkingPositions) {
        newPossiblePositions.add(new ChessMove(ogPosition,i, null));//right one
    }
        for (ChessMove in : newPossiblePositions) {
                if (in.getEndPosition().row < 1 || in.getEndPosition().col < 1 || in.getEndPosition().row > 8 || in.getEndPosition().col > 8) {
                    System.out.println("off the board");
                    newPossiblePositions.remove(in);
                }
                if (board.getPiece(ogPosition) == null) {
                    if (board.getPiece(in.getStartPosition()).pieceColor == board.getPiece(in.getEndPosition()).pieceColor) {
                        System.out.println("Your own piece is there");
                        newPossiblePositions.remove(in);
                    }
                }
            }


        return newPossiblePositions;}
    public ArrayList<ChessPosition> QueenMoves(ChessBoard board, ChessPosition ogPosition){return null;}
    public ArrayList<ChessPosition> BishopMoves(ChessBoard board, ChessPosition ogPosition){return null;}
    public ArrayList<ChessPosition> KnightMoves(ChessBoard board, ChessPosition ogPosition){return null;}
    public ArrayList<ChessPosition> RookMoves(ChessBoard board, ChessPosition ogPosition){return null;}
    public ArrayList<ChessPosition> PawnMoves(ChessBoard board, ChessPosition ogPosition){return null;}
}
